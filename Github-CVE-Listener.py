#coding = ctf-8

import urllib
import requests,re,time
import html
import json
import os
from base64 import b64encode
from nacl import encoding, public
from lxml import etree

gh_token=os.getenv('GH_TOKEN')
gh_repo=os.getenv('GH_REPO')
Auth=r'token '+gh_token
geturl=r'https://api.github.com/repos/'+gh_repo+r'/actions/secrets/public-key'

def getpublickey(Auth,geturl):
    headers={'Accept': 'application/vnd.github.v3+json','Authorization': Auth}
    html = requests.get(geturl,headers=headers)
    jsontxt = json.loads(html.text)
    if 'key' in jsontxt:
        print("[INFO] Get public key suceeded")
    else:
        print("[ERROR] Get public key failed :( Is secret GH_TOKEN set correctly? ")
    public_key = jsontxt['key']
    global key_id 
    key_id = jsontxt['key_id']
    return public_key

#encrypt secret
def createsecret(public_key,secret_value):
    public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
    sealed_box = public.SealedBox(public_key)
    encrypted = sealed_box.encrypt(str(secret_value).encode("utf-8"))
    return b64encode(encrypted).decode("utf-8")

#upload total_count as secret
def setsecret(encrypted_value,key_id,puturl):
    headers={'Accept': 'application/vnd.github.v3+json','Authorization': Auth}
    data_str=r'{"encrypted_value":"'+encrypted_value+r'",'+r'"key_id":"'+key_id+r'"}'
    putstatus=requests.put(puturl,headers=headers,data=data_str)
    if putstatus.status_code >= 300:
        print("[ERROR] total_count upload failed!")
    else:
        print("[INFO] total_count upload suceeded!")
    return putstatus
#get cve related repos
def getNews():
    try:
        api = "https://api.github.com/search/repositories?q=CVE-2022&sort=updated"
        req = requests.get(api).text
        respJson = json.loads(req)
        #cve_total_count=re.findall ('"total_count":*.{1,10}"incomplete_results"',req)[0][14:17]
        cve_total_count=respJson["total_count"]
        cve_description=re.findall ('"description":*.{1,200}"fork"',req)[0].replace("\",\"fork\"",'').replace("\"description\":\"",'')
        #cve_description = respJson["items"][0]["description"]
        cve_url=re.findall ('"svn_url":*.{1,200}"homepage"',req)[0].replace("\",\"homepage\"",'').replace("\"svn_url\":\"",'')
        return cve_total_count,cve_description,cve_url

    except Exception as e:
        print ("[ERROR] ",e,"Can not connect to github :( ")
#get vuln description from CVE
def get_cve_des(cve):
    try:
        time.sleep(3)
        query_cve_url = "https://cve.mitre.org/cgi-bin/cvename.cgi?name=" + cve
        github_headers = {
        'Authorization': Auth }
        response = requests.get(query_cve_url, headers=github_headers, timeout=10)
        html = etree.HTML(response.text)
        des = html.xpath('//*[@id="GeneratedTable"]/table//tr[4]/td/text()')[0].strip()
        return des
    except Exception as e:
        #err = "Sorry, can not get description"
        print("[ERROR] Get CVE description Failed")
        text = "(⁄ ⁄•⁄ω⁄•⁄ ⁄) Whoops.. Seems CVE description has lost its way :O"
        return text
#Send Message
def sendNews(total_count):
    try:
        api = "https://api.github.com/search/repositories?q=CVE-2021&sort=updated"
        req = requests.get(api).text
        #The title of the message
        text = r'Senpai! New CVE updates arrived! .qwq.'
        sckey = os.environ["SCKEY"]
        respJson = json.loads(req)
        cve_name = respJson["items"][0]["name"]
        
      
        #The contents of the message
        if int(total_count) < getNews()[0]:
             #Description from CVE
             cve_des = get_cve_des(cve_name)
             print("[INFO] CVE updates found! Sending Wechat!")
             msg ="repo number: " + str(getNews()[0]) + "%0D%0A%0D%0A" +"GitHub description: " + getNews()[1]+ "%0D%0A%0D%0A" + "Link: " + getNews()[2] +  "%0D%0A%0D%0A" + "CVE Vulnerability Description: " + cve_des + "%0D%0A%0D%0A" + "(⁄ ⁄•⁄ω⁄•⁄ ⁄)"
             uri = 'https://sc.ftqq.com/'+ sckey +'.send?text={}&desp={}'.format(text, msg)
             send = requests.get(uri)
             total_count = getNews()[0]
             return total_count
        elif int(total_count) > getNews()[0]:
             print("[WARN] Some repos are deleted!")
             total_count = getNews()[0]
             return total_count
        else:
             print("[INFO] No CVE updates found! Bye!")
             #Test code
             #send = requests.get(uri)
             exit()


    except Exception as e:
        raise e


if __name__ == '__main__':
    total_count = os.getenv('total_count')
    puturl=r'https://api.github.com/repos/'+gh_repo+r'/actions/secrets/TOTAL_COUNT'
    key_id='qwq'
    encrypted_value=createsecret(getpublickey(Auth,geturl),sendNews(total_count))
    setsecret(encrypted_value,key_id,puturl)
    #sendNews()
